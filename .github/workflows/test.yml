name: Test

# This is derived from the standard CMake template for github actions.
# For more details on the settings used, have a look at the template in the marketplace

# Only pushes and PRs against the master branch are built
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    # Strategy: builds on oldest and newest Ubuntu and on Windows
    # Oldest -> because that's what is used to build backwards compatible packages (see release.yaml)
    # Newest -> so that we can test with latest tools (clang-tidy) and use recent drivers/packages
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-lates, windows-latest]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install GL/X11 packages for rendering (Linux only)
      run: |
        sudo apt-get install libgles2-mesa-dev libx11-dev
      if: ${{ contains(matrix.os, 'ubuntu') }}

    - name: Install clang and clang-tidy
      run: |
        sudo apt-get install -y clang-10 clang-tidy-10 llvm-10
        sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-10 100
      if: ${{ matrix.os == 'ubuntu-latest' }}

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake (Windows)
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        # This is needed because on the Windows Server 2019 build nodes of Github, the Perl installation
        # exposes its libraries on the path and messes up CMake builds
        echo "Path before: $PATH"
        export PATH=$(echo "$PATH" | sed -e 's/:\/c\/Strawberry\/c\/bin//')
        export PATH=$(echo "$PATH" | sed -e 's/:\/c\/Strawberry\/perl\/site\/bin//')
        export PATH=$(echo "$PATH" | sed -e 's/:\/c\/Strawberry\/perl\/bin//')
        echo "Path after: $PATH"

        cmake $GITHUB_WORKSPACE \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: ${{ matrix.os == 'windows-latest' }}

    - name: Configure CMake (Latest Ubuntu + Clang)
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $GITHUB_WORKSPACE \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
            -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/toolchain/Linux_X86_64_llvm.toolchain \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: ${{ matrix.os == 'ubuntu-latest' }}

    - name: Configure CMake (Oldest Ubuntu + GCC)
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $GITHUB_WORKSPACE \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: ${{ matrix.os == 'ubuntu-20.04' }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE --exclude-regex '.*SWRAST'

    - name: Run clang-tidy
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        compile_commands_path=$(pwd)/compile_commands.json
        echo "compile_commands_path: $compile_commands_path"
        cd $GITHUB_WORKSPACE
        $GITHUB_WORKSPACE/ci/scripts/clang-tidy-wrapper.py \
        --config $GITHUB_WORKSPACE/ci/scripts/config/clang-tidy-wrapper.yaml \
        $compile_commands_path
      if: ${{ matrix.os == 'ubuntu-latest' }}
